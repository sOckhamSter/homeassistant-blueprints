blueprint:
  name: Octopus Saving Session for GivEnergy
  description: Prevents the battery from discharging if there's not enough remaining charge for a scheduled Saving Session, and enables discharge again before the session begins.
  domain: automation
  input:
    battery_soc:
      name: Battery SOC sensor
      description: Live state of charge (percentage) of the battery (sensor entity)
      selector:
        entity:
          domain:
            - sensor
    octopus_saving_session_day:
      name: Octopus Saving Session Day
      description: The date of the scheduled Saving Session (input_datetime helper. Date only.)
      selector:
        entity:
          domain:
            - input_datetime
    octopus_saving_session_start_time:
      name: Octopus Saving Session Start Time
      description: What time does the Saving Session begin? (input_datetime helper. Time only.)
      selector:
        entity:
          domain:
            - input_datetime
    octopus_saving_session_end_time:
      name: Octopus Saving Session End Time
      description: What time does the Saving Session finish? (input_datetime helper. Time only.)
      selector:
        entity:
          domain:
            - input_datetime
    battery_percentage_per_hour:
      name: Battery Percentage Per Hour
      description: How much battery percentage, per hour, do you need to make sure is reserved? (input_number. limit 1-100)
      selector:
        entity:
          domain:
            - input_number
    battery_enable_discharge_switch:
      name: Enable battery discharge switch
      description: Switch which enables or disables the battery's ability to discharge. When on, discharge is possible. (switch)
      selector:
        entity:
          domain:
            - switch
    battery_mode:
      name: Battery Mode
      description: The current mode of the battery, so as we know whether it's in eco mode or not (select)
      selector:
        entity:
          domain:
            - select

mode: single
max_exceeded: silent

variables:
  battery_soc: !input battery_soc
  octopus_saving_session_day: !input octopus_saving_session_day
  octopus_saving_session_start_time: !input octopus_saving_session_start_time
  octopus_saving_session_end_time: !input octopus_saving_session_end_time
  battery_percentage_per_hour: !input battery_percentage_per_hour

trigger:
  - platform: state
    alias: Trigger whenever the battery SOC changes
    entity_id:
      - !input battery_soc
    id: soc_change
  - platform: time_pattern
    minutes: /15
    id: check_the_time

condition:
  - alias: Only execute this automation on the saving session day
    condition: template
    value_template: >-
      {{ (now().date() + timedelta(days=0)) | string ==
      states(octopus_saving_session_day) }}
  - alias: Only run after 7am to avoid the battery charging hours
    condition: time
    after: "07:00:00"
    
action:
  - choose:
      - alias: >-
          When the battery SOC changes, check that we have enough reserve for
          the saver session and pause discharge if necessary
        conditions:
          - condition: trigger
            id: soc_change
          - alias: >-
              We are not within 15 minutes of the start time of the saving
              session
            condition: template
            value_template: >-
              {{ ((now().hour * 3600) + (now().minute * 60) + now().second )|int
              <
              (state_attr(octopus_saving_session_start_time,'timestamp')-(15*60))|int
              }}
          - alias: We don't have enough battery left (SOC < required power)
            condition: template
            value_template: >-
              {{ states(battery_soc)|int <
              (((state_attr(octopus_saving_session_end_time,'timestamp')
              -
              state_attr(octopus_saving_session_start_time,'timestamp'))/3600)*states(battery_percentage_per_hour)|int
              +
              states(battery_percentage_per_hour)|int)|int
              }}
          - alias: Battery is currently discharging
            condition: state
            entity_id: !input battery_mode
            state: Eco
        sequence:
          - alias: Disable the battery discharge to conserve it for the saver session
            service: homeassistant.turn_off
            data: {}
            target:
              entity_id: !input battery_enable_discharge_switch
          - service: notify.persistent_notification
            data:
              message: >-
                Battery SOC getting too low for scheduled saving session.
                Pausing discharge.
      - alias: >-
          If the battery is not in Eco mode 15 minutes before the Saving
          Session, Enable It!
        conditions:
          - condition: trigger
            id: check_the_time
          - alias: If the battery is not in eco mode
            condition: not
            conditions:
              - condition: state
                entity_id: !input battery_mode
                state: Eco
          - alias: >-
              Are we after 15 minutes before saving session starts, but before
              the actual start?
            condition: template
            value_template: >-
              {{ (((now().hour * 3600) + (now().minute * 60) + now().second
              )|int >=
              (state_attr(octopus_saving_session_start_time,'timestamp')-(15*60))|int)
              and (((now().hour * 3600) + (now().minute * 60) + now().second
              )|int <
              (state_attr(octopus_saving_session_start_time,'timestamp'))|int)
              }}
        sequence:
          - alias: Enable the battery discharge for the saving session
            service: homeassistant.turn_on
            data: {}
            target:
              entity_id: !input battery_enable_discharge_switch
          - service: notify.persistent_notification
            data:
              message: Battery was paused, resuming discharge for saving session
